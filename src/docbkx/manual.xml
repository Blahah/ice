<?xml version='1.0'?>
<book id="gdIceManual" lang="en" xmlns="http://docbook.org/ns/docbook" version="5.0"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://docbook.org/ns/docbook ">
    <bookinfo>
        <title>JBEI-ICE Manual</title>
    </bookinfo>
    <chapter id="introduction">
        <title>Introduction</title>
        <para>
            Welcome to the JBEI Registry Software Version 3.3.2 (ICE). We hope you
            find our tools useful. More information, feature requests, bug
            reports, as well as discussions are available from our Google
            Project
            page:
            <ulink url="http://code.google.com/p/gd-ice/">http://code.google.com/p/gd-ice/</ulink>
        </para>
    </chapter>
    <chapter id="installation">
        <title>Installation</title>
        <sect2 id="requirements">
            <title>Requirements</title>
            <para>
                Running ICE as a web application requires deployment in a J2EE servlet container such as
                Apache Tomcat and depends on JRE (or JDK) 7. The
                <ulink url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Oracle version</ulink>
                is recommended.
                Ensure that the JAVA_HOME environment variable is pointing to the Java installation directory.
            </para>
            <para>
                To use BLAST to search sequences,
                <ulink url="http://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&amp;PAGE_TYPE=BlastDocs&amp;DOC_TYPE=Download">
                    legacy ncbi-blast
                </ulink>
                must be installed on your system. We are working to upgrade to BLAST+.
            </para>
            <para>
                JBEI-ICE is configured by default to use
                <ulink url="http://hsqldb.org/">HSQLDB</ulink>
                for data
                storage. In a production environment, it is
                highly recommended that a standalone database be used. Hibernate is used for Object/Relational
                mapping and therefore JBEI-ICE can be configured and used with any of the Hibernate supported
                databases. PostgreSQL has been tested more extensively with ICE and is therefore highly recommended.
            </para>
        </sect2>
        <sect2 id="install-from-war">
            <title>Installing from the WAR file</title>
            <para>
                Obtain the pre-compiled WAR file available from the
                <ulink
                        url="http://code.google.com/p/gd-ice/downloads/list">download site
                </ulink>
                and configure as
                follows:
            </para>
            <para>
                <itemizedlist>
                    <listitem>Extract the contents of the WAR file using any unzip utility.</listitem>
                    <listitem>Change the hibernate database connections in
                        $ICE_HOME/WEB-INF/classes/hibernate.cfg.xml (where $ICE_HOME is the
                        directory where the WAR file was extracted). The following is the example configuration for a
                        PostgreSQL database running on the local machine:
                        <programlisting><![CDATA[
<property name="hibernate.connection.url">jdbc:postgresql://localhost/test_registry</property>
<property name="hibernate.connection.driver_class">org.postgresql.Driver</property>
<property name="hibernate.connection.username">testuser</property>
<property name="hibernate.connection.password">Pa55WorD</property>
    ...
<property name="dialect">org.hibernate.dialect.PostgreSQL82Dialect</property>]]>
                        </programlisting>
                    </listitem>
                    <listitem>Specify the location of the log files in
                        $ICE_HOME/WEB-INF/classes/log4j.properties.
                    </listitem>
                    <listitem>Deploy $ICE_HOME as the ROOT webapp in the servlet container.</listitem>
                    <listitem>Change the value of the property
                        <programlisting><![CDATA[
<property name="hibernate.search.default.indexBase">/tmp/regindex</property>]]>
                        </programlisting>
                        in
                        $ICE_HOME/WEB-INF/classes/hibernate.cfg.xml. This is where the lucene index is maintained.
                    </listitem>
                    <listitem>You may change the logo (which appears on the login page and the page headers) by
                        replacing $ICE_HOME/static/images/logo.png with your custom logo.
                    </listitem>
                    <listitem>You may change the application page title by opening $ICE_HOME/Gwt_ice.html in any
                        text editor and replacing "JBEI Registry".
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                Start up the application container and use your web browser to access JBEI-ICE.
                There are some settings stored in the database that also need to be configured. The default
                administrator username and password is "Administrator" (for both). Be sure to change the password.
                The rest of the system settings are on the Admin section of the application.
                Please go through all the settings and make sure the values are correct. They can
                be changed at any time while the application is running.
            </para>
        </sect2>
        <sect2 id="install-from-sources">
            <title>Installing from source code</title>
            <para>
                To download the sources from the git repository, run:
                <screen>
                    git clone https://code.google.com/p/gd-ice $ICE_HOME
                </screen>
                where $ICE_HOME is the folder name of your choice.
                If you already have the sources and wish to get the latest version from the repository, run:
                <screen>
                    git fetch origin
                </screen>
                in $ICE_HOME.
            </para>
            <para>
                We use Maven as our dependency and build manager which allows us to automatically manage JBEI-ICE's
                external libraries (and dependencies).
            </para>
            <para>
                You need to<ulink url="http://maven.apache.org/users/index.html">install maven on your system</ulink>.
                Make sure to get version 2 as version 3 is not yet supported.
                Maven is configured via the pom.xml file, and most dependencies are defined there. However, there
                are some external
                libraries that maven does not know about (e.g. biojava and Flex components). We have provided these
                in the
                lib/ directory, and maven has to be told about these.
            </para>
            <para>Run the following commands in the $ICE_HOME/lib directory
                to update your local maven cache with external dependencies.
                <programlisting>
                    mvn install:install-file -Dfile=biojava-1.7-all.jar -DgroupId=org.jbei.ice -DartifactId=biojava-all
                    -Dversion=SNAPSHOT -Dpackaging=jar
                    mvn install:install-file -Dfile=biojava.jar -DgroupId=org.jbei.ice -DartifactId=biojava
                    -Dversion=SNAPSHOT -Dpackaging=jar
                    mvn install:install-file -Dfile=flex-messaging-common.jar -DgroupId=org.jbei.ice
                    -DartifactId=flex-messaging-common -Dversion=SNAPSHOT -Dpackaging=jar
                    mvn install:install-file -Dfile=flex-messaging-core.jar -DgroupId=org.jbei.ice
                    -DartifactId=flex-messaging-core -Dversion=SNAPSHOT -Dpackaging=jar
                    mvn install:install-file -Dfile=flex-messaging-opt.jar -DgroupId=org.jbei.ice
                    -DartifactId=flex-messaging-opt -Dversion=SNAPSHOT -Dpackaging=jar
                    mvn install:install-file -Dfile=flex-messaging-proxy.jar -DgroupId=org.jbei.ice
                    -DartifactId=flex-messaging-proxy -Dversion=SNAPSHOT -Dpackaging=jar
                    mvn install:install-file -Dfile=flex-messaging-remoting.jar -DgroupId=org.jbei.ice
                    -DartifactId=flex-messaging-remoting -Dversion=SNAPSHOT -Dpackaging=jar
                    mvn install:install-file -Dfile=libSBOLj-0.7.0-SNAPSHOT.jar -DgroupId=org.jbei.ice
                    -DartifactId=libSBOLj -Dversion=0.7.0 -Dpackaging=jar
                </programlisting>
                To generate the WAR package, run:
                <screen>
                    mvn clean package -Dmaven.test.skip=true
                </screen>
                This may take several minutes as maven attempts to fetch all additional dependencies and build JBEI-ICE.
            </para>
            <para>
                The exploded war and the compressed war file will be located in the $ICE_HOME/target/ directory. You can
                deploy to your application server using the instructions in<xref linkend="install-from-war"/>.
            </para>
        </sect2>
        <sect2 id="test-server">
            <title>Running a test server</title>
            <para>JBEI-ICE includes a jetty webserver, which can be used test out your compiled package without
                deploying it to tomcat. The jetty settings are defined in $ICE_HOME/jetty-debug.xml. You will need
                to generate a self-signed certificate as JBEI-ICE uses HTTPS by default. To generate a self-signed
                certificate run:
                <screen>keytool -genkey -alias tomcat -keyalg RSA -keystore ./.keystore</screen>
                Follow the prompts and enter the requested information. When prompted for a password, you may use
                'changeit.' If you opt for a different password, make sure to enter that is jetty-debug.xml.
                Copy the generated .keystore file to $ICE_HOME and start jetty by running:
                <screen>mvn jetty:run -Dmaven.test.skip=true</screen>
                Point your browser to https://localhost:8443 to access the application.
            </para>
            <para>
                To stop the server, press Ctrl-C
            </para>
            <para>
                Hint (unix): To capture all the output that pass by use the 'script' utility
                <programlisting>
                    script capturefile.txt
                    mvn jetty:run -Dmaven.test.skip=true
                    exit
                </programlisting>
                Now all the output has been captured to a file, which can be examined.
            </para>
            <para>
                To run a tomcat server, you may also use the generated keystore file.
                Update $TOMCAT_HOME/conf/server.xml to redirect port 8080 to port 8443 using the following
                Connector directive:
                <programlisting>
                    <![CDATA[<Connector executor="tomcatThreadPool"
                           port="8080" protocol="HTTP/1.1"
                           connectionTimeout="20000"
                           redirectPort="8443" />
                <Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true"
                           maxThreads="150" scheme="https" secure="true" keystoreFile="./.keystore"
                           keystorePass="changeit" clientAuth="false" sslProtocol="TLS" />]]>
                </programlisting>

                In a production environment
                you will need to purchase an SSL certificate, since self-generated certificates result in browser
                warnings.
            </para>
        </sect2>
        <sect2 id="doc-build">
            <title>Building documentation</title>
            <para>
                The online documentation is built by running:
                <screen>
                    mvn site -Dmaven.test.skip=true
                </screen>
                The javadoc will be in 'target/site/apidocs', and this manual will be in 'target/docbkx/html'
                directories.
            </para>
            <para>
                To build the javadoc separately, run
                <screen>
                    mvn javadoc:javadoc
                </screen>
                To build the manual separately, run
                <screen>
                    mvn pre-site
                </screen>
            </para>
        </sect2>
    </chapter>

    <chapter id="upgrade">
        <title>Upgrading from older versions</title>
        <para>
            At this time, only upgrading from version 3.1 to any of the 3.3.* versions is supported.
            It is highly recommended that you perform a full database backup before attempting an upgrade.
            There are some changes to the database schemas so ensure that the 'hbm2ddl.auto' property is set to 'update'
            when first starting up the server after updating the webapp.
        </para>
    </chapter>

    <chapter id="administration">
        <title>Administration</title>
        <para>There are a few basic functions available from the the Administrator's
            page located at https://yoursite/#page=admin. Any user with administrative privileges will see
            and admin link in the main menu. The admin section currently has 4 subsections:
            <itemizedlist>
                <listitem>System settings: used for general site settings, email settings,
                    and blast search settings.
                </listitem>
                <listitem>Web of registries settings: allows you include you site in the web of registries and
                    partner with other JBEI-ICE installations.
                </listitem>
                <listitem>Manage User settings: shows list of site members and
                    basic information about them.
                </listitem>
                <listitem>Manage Groups: permits public group creation and management.</listitem>
            </itemizedlist>
        </para>
    </chapter>

    <chapter id="development">
        <title>Development</title>
        <sect1 id="flex-development-setup">
            <title>Set up for Flex Development</title>
            <sect2 id="flex-quick-start">
                <title>Flex Quick Start</title>
                <para>
                    Development on Flex requires the Adobe Flex 3 SDK, and the Adobe Flex Data Visualization SDK. They
                    can both be downloaded from
                    the Adobe website. Unzip the files into a directory, say "flex_3_sdk".
                </para>
                <para>
                    Flex is divided into two components, VectorEditor and BioFlex. These are in two different Google
                    Code projects.
                </para>
                <para>
                    You can obtain the source code by running
                    <screen>
                        <command>git clone https://code.google.com/p/vectoreditor/</command>
                        <command>git clone https://code.google.com/p/bioflex/</command>
                    </screen>
                </para>
                <para>
                    To build a standalone version of VectorEditor, use the following commands to compile it:
                    <screen>
                        <prompt>$</prompt>
                        <command>cd vectoreditor/VectorEditorStandalone</command>
                        <prompt>$</prompt>
                        <command>../../flex_3_sdk/bin/mxmlc -locale en_US \
                            -define=CONFIG::standalone,true -define=CONFIG::registryEdition,false \
                            -define=CONFIG::entryEdition,false \
                            -compiler.include-libraries=./libs/PureMVC_AS3_2_0_4.swc \
                            -compiler.source-path=../VectorCommon/src \
                            -compiler.source-path=../../biofle/bioflex/src \
                            -target-player=10.0.4 \
                            ./src/VectorEditor.mxml
                        </command>
                    </screen>
                    After compilation, the swf file will be in 'src/VectorEditor.swf'
                </para>
            </sect2>
            <sect2 id="flex-ide">
                <title>Using Flex IDE</title>
                <para>
                    There are commercial versions of Flex IDE for Windows and Mac. There is a no-cost version for Linux,
                    built from an obsolete linux
                    alpha version called fb4linux available from Google Code. Along with the debug version of flash
                    player, this linux version
                    can be used to debug flex applications. There are some serious bugs, but we have used it quite
                    successfully.
                </para>
                <para>
                    The linux IDE runs as a plug-in for Eclipse. In our development environment, we use a completely
                    separate instance of
                    Eclipse for gd-ice and flex applications.
                </para>
                <para>
                    If you are using the IDE, it is recommended to create separate projects
                    for each compilation types, as this makes debugging and running simpler. Make sure that
                    targetPlayerVersion="10.0.0" is included in the .actionscriptProperties file, in the &lt;compiler&gt;
                    tag.
                    There is a bug where selecting the menu option to dictate the target player version does not write
                    this variable to the file.
                </para>
                <para>
                    It is possible to create three versions of these apps using the different compiler flags, as can be
                    seen from the
                    above compilation string. The standalone version should be self explanatory. It is used to
                    debug most functionality. The entryEdition version means it works with the registry to show
                    the user one entry. This is the version compiled into gd-ice. The registryEdition
                    is an experimental version that can save to the gd-ice instance as Projects. This
                    flag is not complete.
                </para>
                <para>This has the effect of adding '-services
                    "/yourworkspace/gd-ice/src/main/webapp/WEB-INF/flex/services-config.xml" ' to
                    the compiler flag, and creating the services-config.xml in the target WEB-INF directory.
                </para>
            </sect2>
        </sect1>
        <sect1 id="contributing">
            <title>Contributing Code</title>
            <para>JBEI-ICE is an open source software, and we gladly accept patches to our code. Just send us an email
                and/or a patch file.
            </para>
            <para>When you send us a submission, we ask that you conform to our formatting guidelines. Simply set up
                your Eclipse to use the included "Registry Team Formatter.xml", and
                auto format your file.
            </para>
        </sect1>
    </chapter>

    <chapter id="Credits">
        <title>Credits</title>
        <title>Credits</title>
        <para>JBEI-ICE was developed by the following people:
            <itemizedlist>
                <listitem>Timothy Ham</listitem>
                <listitem>Zinovii Dmytriv</listitem>
                <listitem>Hector Plahar</listitem>
                <listitem>Joanna Chen</listitem>
            </itemizedlist>
        </para>
        <para>
            The development of JBEI-ICE, VectorEditor, and BioFlex was funded by the U.S. Department of Energy,
            Office of Science, Office of Biological and Environmental Research, through contract
            DE-AC02-05CH11231 between Lawrence Berkeley National Laboratory and the U.S. Department of Energy.
        </para>
    </chapter>

</book>
